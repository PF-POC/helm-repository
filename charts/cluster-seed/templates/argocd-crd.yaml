apiVersion: argoproj.io/v1beta1
kind: ArgoCD
metadata:
  finalizers:
  - argoproj.io/finalizer
  # Changing the name affects the ClusterRoleBinding, the generated secret,
  # route URL, and argocd.argoproj.io/managed-by annotations
  name: openshift-gitops
  namespace: openshift-gitops
  annotations:
    argocd.argoproj.io/compare-options: IgnoreExtraneous
    helm.sh/hook: post-install
spec:
# Adding health checks to argocd to prevent pvc resources
# that aren't bound state from blocking deployments
  initialRepositories: |
    - name: day-1
      type: git
      project: default
      url: https://github.com/PF-POC/day-1-gitops.git
      insecure: true
      usernameSecret:
        name: repository-secret
        key: username
      passwordSecret:
        name: repository-secret
        key: password
    - name: day-2
      type: git
      project: default
      url: https://github.com/PF-POC/day-2-gitops.git
      insecure: true
      usernameSecret:
        name: repository-secret
        key: username
      passwordSecret:
        name: repository-secret
        key: password   
    - name: helm-charts
      project: default
      type: helm
      url: https://pf-poc.github.io/helm-repository
  resourceHealthChecks:
  - kind: PersistentVolumeClaim
    check: |
      hs = {}
      if obj.status ~= nil then
        if obj.status.phase ~= nil then
          if obj.status.phase == "Pending" then
            hs.status = "Healthy"
            hs.message = obj.status.phase
            return hs
          elseif obj.status.phase == "Bound" then
            hs.status = "Healthy"
            hs.message = obj.status.phase
            return hs
          end
        end
      end
      hs.status = "Progressing"
      hs.message = "Waiting for PVC"
      return hs
  applicationInstanceLabelKey: argocd.argoproj.io/instance
  configManagementPlugins: |
    - name: argocd-vault-plugin-helm
      init:
        command: [sh, -c]
        args: ["helm dependency build"]
      generate:
        command: ["sh", "-c"]
        args: ["helm template $ARGOCD_APP_NAME -n $ARGOCD_APP_NAMESPACE ${ARGOCD_ENV_HELM_ARGS} . --include-crds | argocd-vault-plugin generate -"]
  controller:
    processors: {}
    resources:
      limits:
        cpu: "4"
        memory: 4Gi
      requests:
        cpu: 500m
        memory: 2Gi
  sso:
    provider: dex
    dex:
      openShiftOAuth: true
      resources:
        limits:
          cpu: 500m
          memory: 256Mi
        requests:
          cpu: 250m
          memory: 128Mi
  initialSSHKnownHosts: {}
  rbac:
    defaultPolicy: role:admin
  repo:
    image: quay.io/rh_ee_pafoster/argocd-vault-plugin
    mountsatoken: true
    resources:
      limits:
        cpu: '1'
        memory: 1Gi
      requests:
        cpu: 250m
        memory: 256Mi
    serviceaccount: vplugin
    version: v1.7
  resourceExclusions:
  server:
    autoscale:
      enabled: false
    grpc:
      ingress:
        enabled: false
    ingress:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 125m
        memory: 128Mi
    route:
      enabled: true
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: reencrypt
    service:
      type: ""
  tls:
    ca: {}
    
# apiVersion: argoproj.io/v1beta1
# kind: ArgoCD
# metadata:
#   name: openshift-gitops
#   namespace: openshift-gitops
#   annotations:
#     argocd.argoproj.io/compare-options: IgnoreExtraneous
#     helm.sh/hook: post-install
#   finalizers:
#   - argoproj.io/finalizer
# spec:
#   resourceHealthChecks:
#   - kind: PersistentVolumeClaim
#     check: |
#       hs = {}
#       if obj.status ~= nil then
#         if obj.status.phase ~= nil then
#           if obj.status.phase == "Pending" then
#             hs.status = "Healthy"
#             hs.message = obj.status.phase
#             return hs
#           elseif obj.status.phase == "Bound" then
#             hs.status = "Healthy"
#             hs.message = obj.status.phase
#             return hs
#           end
#         end
#       end
#       hs.status = "Progressing"
#       hs.message = "Waiting for PVC"
#       return hs
#   applicationSet:
#     resources:
#       limits:
#         cpu: "2"
#         memory: 1Gi
#       requests:
#         cpu: "1"
#         memory: 1Gi
#   controller:
#     processors: {}
#     resources:
#       limits:
#         cpu: "6"
#         memory: 8Gi
#       requests:
#         cpu: "1"
#         memory: 4Gi
#     sharding: {}
#   sso:
#     provider: dex
#     dex:
#       openShiftOAuth: true
#       resources:
#         limits:
#           cpu: 500m
#           memory: 256Mi
#         requests:
#           cpu: 250m
#           memory: 128Mi
#   grafana:
#     enabled: false
#     ingress:
#       enabled: false
#     resources:
#       limits:
#         cpu: 500m
#         memory: 256Mi
#       requests:
#         cpu: 250m
#         memory: 128Mi
#     route:
#       enabled: false
#   ha:
#     enabled: false
#     resources:
#       limits:
#         cpu: 500m
#         memory: 256Mi
#       requests:
#         cpu: 250m
#         memory: 128Mi
#   initialRepositories: |
#     - name: day-1
#       type: git
#       project: default
#       url: https://github.com/PF-POC/day-1-gitops.git
#       insecure: true
#       usernameSecret:
#         name: repository-secret
#         key: username
#       passwordSecret:
#         name: repository-secret
#         key: password
#     - name: day-2
#       type: git
#       project: default
#       url: https://github.com/PF-POC/day-2-gitops.git
#       insecure: true
#       usernameSecret:
#         name: repository-secret
#         key: username
#       passwordSecret:
#         name: repository-secret
#         key: password   
#     - name: helm-charts
#       project: default
#       type: helm
#       url: "https://PF-POC.github.io/helm-charts/"
#   initialSSHKnownHosts: {}
#   notifications:
#     enabled: false
#   prometheus:
#     enabled: false
#     ingress:
#       enabled: false
#     route:
#       enabled: false
#   rbac:
#     defaultPolicy: role:admin
#   configManagementPlugins: |
#     - name: argocd-vault-plugin
#       generate:
#         command: ["argocd-vault-plugin"]
#         args: ["generate", "./"]
#     - name: argocd-vault-plugin-helm
#       generate:
#         command: ["sh", "-c"]
#         args: ["helm template . > all.yaml && argocd-vault-plugin generate all.yaml"]
#   redis:
#     resources:
#       limits:
#         cpu: 500m
#         memory: 256Mi
#       requests:
#         cpu: 250m
#         memory: 128Mi  
#   repo:
#     image: 
#     mountsatoken: true
#     resources:
#       limits:
#         cpu: '1'
#         memory: 1Gi
#       requests:
#         cpu: 250m
#         memory: 256Mi
#     serviceaccount: vault-auth
#     version: v1.7
#   server:
#     autoscale:
#       enabled: false
#     grpc:
#       ingress:
#         enabled: false
#     ingress:
#       enabled: false
#     resources:
#       limits:
#         cpu: 500m
#         memory: 256Mi
#       requests:
#         cpu: 125m
#         memory: 128Mi
#     route:
#       enabled: true
#     service:
#       type: ""
#   tls:
#     ca: 
#       configMapName: ca-config-map
#       secretName: argocd-server-tls

# apiVersion: argoproj.io/v1beta1
# kind: ArgoCD
# metadata:
#   finalizers:
#   - argoproj.io/finalizer
#   # Changing the name affects the ClusterRoleBinding, the generated secret,
#   # route URL, and argocd.argoproj.io/managed-by annotations
#   name: openshift-gitops
#   namespace: openshift-gitops
#   annotations:
#     argocd.argoproj.io/compare-options: IgnoreExtraneous
#     helm.sh/hook: post-install
# spec:
# # Adding health checks to argocd to prevent pvc resources
# # that aren't bound state from blocking deployments
#   initialRepositories: |
#     - name: day-1
#       type: git
#       project: default
#       url: https://github.com/PF-POC/day-1-gitops.git
#       insecure: true
#       usernameSecret:
#         name: repository-secret
#         key: username
#       passwordSecret:
#         name: repository-secret
#         key: password
#     - name: day-2
#       type: git
#       project: default
#       url: https://github.com/PF-POC/day-2-gitops.git
#       insecure: true
#       usernameSecret:
#         name: repository-secret
#         key: username
#       passwordSecret:
#         name: repository-secret
#         key: password   
#     - name: helm-charts
#       project: default
#       type: helm
#       url: "https://PF-POC.github.io/helm-charts"
#   resourceHealthChecks:
#   - kind: PersistentVolumeClaim
#     check: |
#       hs = {}
#       if obj.status ~= nil then
#         if obj.status.phase ~= nil then
#           if obj.status.phase == "Pending" then
#             hs.status = "Healthy"
#             hs.message = obj.status.phase
#             return hs
#           elseif obj.status.phase == "Bound" then
#             hs.status = "Healthy"
#             hs.message = obj.status.phase
#             return hs
#           end
#         end
#       end
#       hs.status = "Progressing"
#       hs.message = "Waiting for PVC"
#       return hs
#   applicationInstanceLabelKey: argocd.argoproj.io/instance
#   configManagementPlugins: |
#     - name: argocd-vault-plugin
#       generate:
#         command: ["argocd-vault-plugin"]
#         args: ["generate", "./"]
#     - name: argocd-vault-plugin-helm
#       generate:
#         command: ["sh", "-c"]
#         args: ["helm template . > all.yaml && argocd-vault-plugin generate all.yaml"]
#   controller:
#     processors: {}
#     resources:
#       limits:
#         cpu: "4"
#         memory: 4Gi
#       requests:
#         cpu: 500m
#         memory: 2Gi
#   sso:
#     provider: dex
#     dex:
#       openShiftOAuth: true
#       resources:
#         limits:
#           cpu: 500m
#           memory: 256Mi
#         requests:
#           cpu: 250m
#           memory: 128Mi
#   initialSSHKnownHosts: {}
#   rbac:
#     defaultPolicy: role:admin
#   repo:
#     resources:
#       limits:
#         cpu: "1"
#         memory: 512Mi
#       requests:
#         cpu: 250m
#         memory: 256Mi
#   resourceExclusions:
#   server:
#     autoscale:
#       enabled: false
#     grpc:
#       ingress:
#         enabled: false
#     ingress:
#       enabled: false
#     resources:
#       limits:
#         cpu: 500m
#         memory: 256Mi
#       requests:
#         cpu: 125m
#         memory: 128Mi
#     route:
#       enabled: true
#       tls:
#         insecureEdgeTerminationPolicy: Redirect
#         termination: reencrypt
#     service:
#       type: ""
#   tls:
#     ca: {}







